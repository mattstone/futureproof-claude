<%= form_with model: [:admin, workflow], local: true, class: "workflow-form" do |form| %>
  <% if workflow.errors.any? %>
    <div class="form-errors">
      <h4><%= pluralize(workflow.errors.count, "error") %> prohibited this workflow from being saved:</h4>
      <ul>
        <% workflow.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="form-content">
    <!-- Basic Workflow Information -->
    <div class="form-section">
      <div class="section-header">
        <h3>Workflow Details</h3>
        <p>Configure the basic settings for your email workflow.</p>
      </div>
      
      <div class="form-grid">
        <div class="form-group full-width">
          <%= form.label :name, class: "form-label" %>
          <%= form.text_field :name, class: "form-input", placeholder: "e.g., Welcome New Customers", required: true %>
          <p class="form-help">Give your workflow a descriptive name</p>
        </div>
        
        <div class="form-group full-width">
          <%= form.label :description, class: "form-label" %>
          <%= form.text_area :description, class: "form-textarea", rows: 3, placeholder: "Describe what this workflow does and when it should run..." %>
          <p class="form-help">Optional description to help team members understand this workflow</p>
        </div>
        
        <div class="form-group">
          <%= form.label :trigger_type, class: "form-label" %>
          <%= form.select :trigger_type, 
                          options_for_select([
                            ['Application Created', 'application_created'],
                            ['Application Status Changed', 'application_status_changed'],
                            ['User Registered', 'user_registered'],
                            ['Document Uploaded', 'document_uploaded'],
                            ['Contract Signed', 'contract_signed'],
                            ['Inactivity Detected', 'inactivity'],
                            ['Time Delay', 'time_delay']
                          ], workflow.trigger_type),
                          { prompt: "Select when this workflow should trigger..." },
                          { class: "form-select", required: true, data: { trigger_select: true } } %>
          <p class="form-help">Choose what event will start this workflow</p>
        </div>
        
        <div class="form-group">
          <div class="form-checkbox">
            <%= form.check_box :active, class: "form-checkbox-input" %>
            <%= form.label :active, "Active Workflow", class: "form-checkbox-label" %>
          </div>
          <p class="form-help">Only active workflows will run automatically</p>
        </div>
      </div>
    </div>

    <!-- Trigger Conditions -->
    <div class="form-section" id="trigger-conditions-section">
      <div class="section-header">
        <h3>Trigger Conditions</h3>
        <p>Specify additional conditions for when this workflow should run.</p>
      </div>
      
      <div id="trigger-conditions-content">
        <!-- Dynamic content will be loaded here based on trigger type -->
        <%= render 'trigger_conditions', form: form, workflow: workflow %>
      </div>
    </div>

    <!-- Workflow Steps -->
    <div class="form-section">
      <div class="section-header">
        <h3>Workflow Steps</h3>
        <p>Design the sequence of actions this workflow will perform.</p>
      </div>
      
      <div id="workflow-steps" class="workflow-steps">
        <%= form.fields_for :workflow_steps do |step_fields| %>
          <%= render 'workflow_step_fields', f: step_fields, email_templates: @email_templates %>
        <% end %>
        
        <div class="workflow-steps-empty" style="<%= 'display: none;' if workflow.workflow_steps.any? %>">
          <div class="empty-steps-message">
            <i class="fas fa-plus-circle"></i>
            <h4>No Steps Added Yet</h4>
            <p>Add your first step to begin building your workflow sequence.</p>
          </div>
        </div>
      </div>
      
      <div class="add-step-section">
        <div class="add-step-buttons">
          <button type="button" class="btn-add-step" data-step-type="send_email">
            <i class="fas fa-envelope"></i>
            <span>Send Email</span>
          </button>
          <button type="button" class="btn-add-step" data-step-type="delay">
            <i class="fas fa-clock"></i>
            <span>Add Delay</span>
          </button>
          <button type="button" class="btn-add-step" data-step-type="condition">
            <i class="fas fa-code-branch"></i>
            <span>Add Condition</span>
          </button>
          <button type="button" class="btn-add-step" data-step-type="update_status">
            <i class="fas fa-edit"></i>
            <span>Update Status</span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Form Actions -->
  <div class="form-actions">
    <div class="actions-left">
      <%= link_to workflow.persisted? ? admin_email_workflow_path(workflow) : admin_email_workflows_path, 
                  class: "btn-secondary" do %>
        <i class="fas fa-times"></i> Cancel
      <% end %>
    </div>
    
    <div class="actions-right">
      <% if workflow.persisted? %>
        <%= link_to preview_admin_email_workflow_path(workflow), 
                   class: "btn-secondary", target: "_blank" do %>
          <i class="fas fa-eye"></i> Preview
        <% end %>
      <% end %>
      
      <%= form.submit workflow.persisted? ? "Update Workflow" : "Create Workflow", 
                     class: "btn-primary" %>
    </div>
  </div>
<% end %>

<!-- Step Template for JavaScript -->
<script type="text/template" id="step-template">
  <%= render 'workflow_step_fields', f: nil, email_templates: @email_templates %>
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let stepIndex = <%= workflow.workflow_steps.length %>;
  const stepsContainer = document.getElementById('workflow-steps');
  const emptyMessage = document.querySelector('.workflow-steps-empty');
  
  // Add step functionality
  document.querySelectorAll('.btn-add-step').forEach(button => {
    button.addEventListener('click', function() {
      const stepType = this.dataset.stepType;
      addStep(stepType);
    });
  });
  
  function addStep(stepType) {
    const template = document.getElementById('step-template').innerHTML;
    const stepHtml = template
      .replace(/NEW_RECORD/g, new Date().getTime())
      .replace(/email_workflow_workflow_steps_attributes_\d+/g, `email_workflow_workflow_steps_attributes_${stepIndex}`)
      .replace(/\[workflow_steps_attributes\]\[\d+\]/g, `[workflow_steps_attributes][${stepIndex}]`)
      .replace(/step_type_placeholder/g, stepType);
    
    const stepDiv = document.createElement('div');
    stepDiv.innerHTML = stepHtml;
    stepDiv.className = 'workflow-step-item';
    
    // Set the step type
    const stepTypeSelect = stepDiv.querySelector('[name*="step_type"]');
    if (stepTypeSelect) {
      stepTypeSelect.value = stepType;
      stepTypeSelect.dispatchEvent(new Event('change'));
    }
    
    // Set position
    const positionInput = stepDiv.querySelector('[name*="position"]');
    if (positionInput) {
      positionInput.value = stepIndex;
    }
    
    stepsContainer.appendChild(stepDiv);
    stepIndex++;
    
    // Hide empty message
    emptyMessage.style.display = 'none';
    
    // Initialize step functionality
    initializeStep(stepDiv);
  }
  
  // Remove step functionality
  document.addEventListener('click', function(e) {
    if (e.target.matches('.remove-step, .remove-step *')) {
      const stepItem = e.target.closest('.workflow-step-item');
      const destroyInput = stepItem.querySelector('[name*="_destroy"]');
      
      if (destroyInput) {
        destroyInput.value = '1';
        stepItem.style.display = 'none';
      } else {
        stepItem.remove();
      }
      
      // Show empty message if no steps left
      if (stepsContainer.children.length === 1) { // Only empty message left
        emptyMessage.style.display = 'block';
      }
      
      updateStepPositions();
    }
  });
  
  // Step type change handler
  document.addEventListener('change', function(e) {
    if (e.target.matches('[name*="step_type"]')) {
      const stepItem = e.target.closest('.workflow-step-item');
      const stepType = e.target.value;
      const configSection = stepItem.querySelector('.step-configuration');
      
      // Show/hide configuration sections based on step type
      configSection.querySelectorAll('.config-group').forEach(group => {
        group.style.display = 'none';
      });
      
      const relevantConfig = configSection.querySelector(`[data-step-type="${stepType}"]`);
      if (relevantConfig) {
        relevantConfig.style.display = 'block';
      }
    }
  });
  
  // Trigger type change handler
  const triggerSelect = document.querySelector('[data-trigger-select]');
  if (triggerSelect) {
    triggerSelect.addEventListener('change', function() {
      loadTriggerConditions(this.value);
    });
  }
  
  function loadTriggerConditions(triggerType) {
    // This would make an AJAX request to load trigger-specific conditions
    // For now, we'll handle it with basic JavaScript
    const conditionsContent = document.getElementById('trigger-conditions-content');
    
    // Clear existing conditions
    conditionsContent.innerHTML = '';
    
    if (triggerType === 'application_status_changed') {
      conditionsContent.innerHTML = `
        <div class="form-group">
          <label class="form-label">From Status</label>
          <select name="email_workflow[trigger_conditions][from_status]" class="form-select">
            <option value="">Any status</option>
            <option value="created">Created</option>
            <option value="submitted">Submitted</option>
            <option value="processing">Processing</option>
            <option value="accepted">Accepted</option>
            <option value="rejected">Rejected</option>
          </select>
          <p class="form-help">Only trigger when changing from this status</p>
        </div>
        <div class="form-group">
          <label class="form-label">To Status</label>
          <select name="email_workflow[trigger_conditions][to_status]" class="form-select">
            <option value="">Any status</option>
            <option value="created">Created</option>
            <option value="submitted">Submitted</option>
            <option value="processing">Processing</option>
            <option value="accepted">Accepted</option>
            <option value="rejected">Rejected</option>
          </select>
          <p class="form-help">Only trigger when changing to this status</p>
        </div>
      `;
    } else if (triggerType === 'time_delay') {
      conditionsContent.innerHTML = `
        <div class="form-group">
          <label class="form-label">Delay After</label>
          <select name="email_workflow[trigger_conditions][delay_after]" class="form-select">
            <option value="application_created">Application Created</option>
            <option value="last_activity">Last Activity</option>
            <option value="status_change">Status Change</option>
          </select>
        </div>
        <div class="form-grid">
          <div class="form-group">
            <label class="form-label">Duration</label>
            <input type="number" name="email_workflow[trigger_conditions][duration]" class="form-input" min="1" placeholder="1">
          </div>
          <div class="form-group">
            <label class="form-label">Unit</label>
            <select name="email_workflow[trigger_conditions][unit]" class="form-select">
              <option value="hours">Hours</option>
              <option value="days">Days</option>
              <option value="weeks">Weeks</option>
            </select>
          </div>
        </div>
      `;
    }
  }
  
  function updateStepPositions() {
    const steps = stepsContainer.querySelectorAll('.workflow-step-item:not([style*="display: none"])');
    steps.forEach((step, index) => {
      const positionInput = step.querySelector('[name*="position"]');
      if (positionInput) {
        positionInput.value = index;
      }
    });
  }
  
  function initializeStep(stepDiv) {
    // Initialize any step-specific functionality
    const stepTypeSelect = stepDiv.querySelector('[name*="step_type"]');
    if (stepTypeSelect) {
      stepTypeSelect.dispatchEvent(new Event('change'));
    }
  }
  
  // Initialize existing steps
  document.querySelectorAll('.workflow-step-item').forEach(initializeStep);
});
</script>

<style>
.workflow-form {
  max-width: none;
}

.form-content {
  background: white;
  border-radius: 8px;
  border: 1px solid #e5e7eb;
  overflow: hidden;
}

.form-section {
  padding: 32px;
  border-bottom: 1px solid #f3f4f6;
}

.form-section:last-child {
  border-bottom: none;
}

.section-header {
  margin-bottom: 24px;
}

.section-header h3 {
  font-size: 1.25rem;
  font-weight: 600;
  color: #111827;
  margin-bottom: 4px;
}

.section-header p {
  color: #6b7280;
  margin: 0;
}

.form-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 24px;
  align-items: start;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.form-group.full-width {
  grid-column: 1 / -1;
}

.form-label {
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
}

.form-input, .form-select, .form-textarea {
  padding: 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 0.875rem;
  transition: border-color 0.15s ease;
}

.form-input:focus, .form-select:focus, .form-textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.form-textarea {
  resize: vertical;
  min-height: 80px;
}

.form-help {
  font-size: 0.75rem;
  color: #6b7280;
  margin: 0;
}

.form-checkbox {
  display: flex;
  align-items: center;
  gap: 8px;
}

.form-checkbox-input {
  width: 16px;
  height: 16px;
}

.form-checkbox-label {
  margin: 0;
  cursor: pointer;
}

.workflow-steps {
  display: flex;
  flex-direction: column;
  gap: 16px;
  margin-bottom: 24px;
}

.workflow-steps-empty {
  text-align: center;
  padding: 48px 24px;
  background: #f9fafb;
  border: 2px dashed #d1d5db;
  border-radius: 8px;
}

.empty-steps-message i {
  font-size: 2rem;
  color: #d1d5db;
  margin-bottom: 12px;
}

.empty-steps-message h4 {
  font-size: 1.125rem;
  color: #111827;
  margin-bottom: 8px;
}

.empty-steps-message p {
  color: #6b7280;
  margin: 0;
}

.add-step-section {
  padding-top: 24px;
  border-top: 1px solid #e5e7eb;
}

.add-step-buttons {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
}

.btn-add-step {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  padding: 20px;
  background: #f9fafb;
  border: 2px dashed #d1d5db;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.15s ease;
  font-size: 0.875rem;
  font-weight: 500;
  color: #6b7280;
}

.btn-add-step:hover {
  border-color: #3b82f6;
  background: #eff6ff;
  color: #3b82f6;
}

.btn-add-step i {
  font-size: 1.5rem;
}

.form-actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 24px 32px;
  background: #f9fafb;
  border-top: 1px solid #e5e7eb;
}

.actions-right {
  display: flex;
  gap: 12px;
}

.form-errors {
  background: #fef2f2;
  border: 1px solid #fecaca;
  border-radius: 6px;
  padding: 16px;
  margin-bottom: 24px;
}

.form-errors h4 {
  color: #dc2626;
  font-size: 0.875rem;
  font-weight: 600;
  margin-bottom: 8px;
}

.form-errors ul {
  color: #dc2626;
  font-size: 0.875rem;
  margin: 0;
  padding-left: 16px;
}

@media (max-width: 768px) {
  .form-grid {
    grid-template-columns: 1fr;
  }
  
  .add-step-buttons {
    grid-template-columns: 1fr;
  }
  
  .form-actions {
    flex-direction: column;
    gap: 16px;
  }
  
  .actions-left, .actions-right {
    width: 100%;
    display: flex;
    justify-content: center;
  }
}
</style>