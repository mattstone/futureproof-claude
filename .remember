# Email Template System - Testing Guide

## New Email Template System Overview

The email template system has been enhanced with:
- **Email Categories**: Operational (system notifications) vs Marketing (promotional)
- **Automatic Headers/Footers**: Based on email category selection
- **Rich Text Editor**: TinyMCE WYSIWYG editor for easy email content creation
- **Multiple Editor Options**: Rich Text (default), HTML Source, and Markup editors
- **Content Body Editor**: Edit only the main content, headers/footers are automatically added
- **Header/Footer Service**: `EmailHeaderFooterService` manages different headers and footers

## Browser Testing Checklist

### 1. Email Template Index Page (Admin → Email Templates)
- [ ] Templates display in modern card layout (not table-style)
- [ ] Templates show email category badge (Operational/Marketing)
- [ ] Color coding: Blue for Operational, Green for Marketing
- [ ] Active/Inactive status badges display correctly
- [ ] Responsive design works on mobile/tablet
- [ ] Summary counts show correct totals

### 2. Create New Email Template
**Path:** Admin → Email Templates → New Template
- [ ] Template Type dropdown works (Verification, Application Submitted, Security)
- [ ] Email Category dropdown works (Operational, Marketing)
- [ ] Category descriptions are clear
- [ ] Field placeholder helper shows correct fields for selected template type
- [ ] Editor note explains that headers/footers will be added automatically

### 3. Rich Text Editor (TinyMCE)
- [ ] Rich text editor loads properly with toolbar
- [ ] Bold, italic, underline formatting works
- [ ] Headers (H2, H3, H4) can be applied
- [ ] Bullet and numbered lists work
- [ ] Text alignment (left, center, right) works
- [ ] Link insertion works
- [ ] Color selection (text and background) works
- [ ] Field placeholders can be inserted via "Fields" button in toolbar
- [ ] Editor generates clean HTML suitable for emails
- [ ] Content saves properly when switching tabs

### 4. HTML Source Editor
- [ ] Shows clean HTML source of email content
- [ ] Can edit HTML directly
- [ ] Field placeholders like `{{user.first_name}}` work
- [ ] Switches back to rich text editor maintaining content
- [ ] Syntax highlighting for HTML (if available)

### 5. Markup Editor
- [ ] Simplified markup syntax works (## headers, **bold**, etc.)
- [ ] Markup help guide is visible
- [ ] Conversion to HTML works correctly
- [ ] Field placeholders work in markup mode

### 6. Email Category Selection
- [ ] Operational category selection shows standard header preview
- [ ] Marketing category selection shows enhanced branding preview
- [ ] Category change updates live preview (if available)
- [ ] Category affects final rendered email output

### 7. Email Preview
**Path:** Admin → Email Templates → [Template] → Preview
- [ ] Preview shows complete email with headers and footers
- [ ] Operational emails use standard blue header with company info
- [ ] Marketing emails use gradient header with enhanced branding
- [ ] Footers match category (operational = simple, marketing = social links)
- [ ] Field substitution works correctly ({{user.first_name}} becomes actual name)
- [ ] Email structure is professional and well-formatted

### 8. Template Editing
**Path:** Admin → Email Templates → [Template] → Edit
- [ ] Existing templates load with current email category
- [ ] Content Body field shows current body content (not full email)
- [ ] Category can be changed and affects preview
- [ ] Save functionality works correctly
- [ ] Validation errors display properly

### 9. Template Validation
- [ ] Required fields show appropriate error messages
- [ ] Email category validation works
- [ ] Security notification templates enforce proper padding (custom validation)
- [ ] Content body validation prevents empty content

### 10. Email Rendering Test
**Via Rails Console or Test Email Feature:**
- [ ] `EmailTemplate.first.render_content(sample_data)` returns complete email
- [ ] Operational templates use EmailHeaderFooterService operational header/footer
- [ ] Marketing templates use EmailHeaderFooterService marketing header/footer
- [ ] Field substitutions work correctly
- [ ] Final HTML is well-formed and renders properly in email clients

### 11. Backward Compatibility
- [ ] Existing email templates still work
- [ ] Old templates without content_body fall back to content field
- [ ] Migration preserved existing email content
- [ ] No broken links or missing data

## Key Test Scenarios

### Scenario 1: Create Marketing Welcome Email with Rich Text Editor
1. Go to Admin → Email Templates → New Template
2. Select "Email Verification" template type
3. Select "Marketing" email category
4. In Rich Text Editor tab:
   - Type "Welcome" and format as Heading 2
   - Add placeholder "{{user.first_name}}" after "Welcome "
   - Create new paragraph: "Thank you for joining Futureproof!"
   - Make "Futureproof" bold
5. Save and preview
6. **Expected:** Email has marketing header with gradient, formatted content with working placeholders, and social links in footer

### Scenario 2: Create Operational Security Alert
1. Create new template with "Security Notification" type
2. Select "Operational" category
3. Use security placeholders like `{{security.ip_address}}`
4. Save and preview
5. **Expected:** Email has standard operational header and simple footer

### Scenario 3: Test Editor Tab Switching
1. Open existing email template for editing
2. Add content in Rich Text Editor with formatting (bold, headings, lists)
3. Switch to "HTML Source" tab
4. **Expected:** See clean HTML source with proper email-compatible formatting
5. Switch back to Rich Text Editor
6. **Expected:** Formatting is preserved and editable

### Scenario 4: Edit Existing Template Category
1. Open existing email template for editing
2. Change email category from Operational to Marketing
3. Save changes
4. **Expected:** Preview shows marketing headers/footers instead of operational

## Common Issues to Watch For

1. **TinyMCE Not Loading:** If rich text editor shows as plain textarea, check browser console for JavaScript errors
2. **Missing Headers/Footers:** If preview shows content without headers, check EmailHeaderFooterService
3. **Validation Errors:** Ensure both content and content_body fields are present for new templates
4. **Field Placeholders:** Verify `{{user.first_name}}` and similar placeholders render correctly
5. **Category Mismatch:** Ensure selected category matches the rendered header/footer style
6. **Tab Switching Issues:** Content should persist when switching between Rich Text, HTML, and Markup editors
7. **Mobile Responsiveness:** Test on different screen sizes
8. **Email Client Compatibility:** Headers/footers should render well in Gmail, Outlook, Apple Mail

## Development Notes

- `EmailHeaderFooterService.render_complete_email(category, body)` combines headers, body, and footers
- Model validates `email_category` in ['operational', 'marketing']
- Content body is the main editing field, content field maintained for backward compatibility
- Migration preserves existing email content in both content and content_body fields
- TinyMCE configured with email-optimized settings and toolbar
- Rich text editor generates clean, email-client-compatible HTML
- JavaScript controllers handle tab switching and content synchronization

## Quick Test Commands (Rails Console)

```ruby
# Test header/footer service
EmailHeaderFooterService.header_for_category('operational')
EmailHeaderFooterService.header_for_category('marketing')

# Test template rendering
template = EmailTemplate.first
sample_data = { user: User.first }
rendered = template.render_content(sample_data)
puts rendered[:subject]
puts rendered[:content]

# Create test marketing template
marketing_template = EmailTemplate.create!(
  name: "Test Marketing",
  template_type: "verification",
  email_category: "marketing",
  subject: "Welcome {{user.first_name}}!",
  content: "placeholder",
  content_body: "<h1>Hello {{user.first_name}}!</h1>",
  description: "Test template"
)
```

## Success Criteria

The email template system is working correctly when:
1. ✅ All browser tests pass
2. ✅ Rich text editor loads and functions properly with formatting options
3. ✅ Tab switching between Rich Text, HTML, and Markup editors works seamlessly
4. ✅ Field placeholders can be inserted via TinyMCE toolbar and render correctly
5. ✅ Email categories affect header/footer styling correctly  
6. ✅ Content body editing works independently from headers/footers
7. ✅ Generated HTML is clean and email-client compatible
8. ✅ Both operational and marketing templates render professionally
9. ✅ Existing templates continue to work without issues
10. ✅ Admin interface is intuitive and responsive

# Email Automation System (FutureFlow) - Testing Guide

## New Email Automation System Overview

The email automation system provides Klaviyo-style workflow automation with:
- **Trigger-Based Workflows**: Application status changes, time delays, user actions
- **Drag-and-Drop Builder**: Visual workflow designer (Phase 2)
- **Smart Scheduling**: Delayed email delivery with retry logic
- **Multi-Step Sequences**: Complex email sequences with conditions
- **Analytics Dashboard**: Track workflow performance (Phase 2)

## Phase 1: Foundation Testing (Current Implementation)

### 1. Database Models Testing
**Path:** Rails Console
- [ ] EmailWorkflow model creates successfully
- [ ] WorkflowStep model with proper validations
- [ ] WorkflowExecution tracks progress correctly
- [ ] ScheduledWorkflowJob handles delays
- [ ] All model associations work properly

### 2. Workflow Creation Testing
**Path:** Admin → Email Workflows → New Workflow
- [ ] Can create workflow with trigger types
- [ ] Workflow steps can be added and ordered
- [ ] Configuration validation works for different step types
- [ ] Email template selection works in send_email steps
- [ ] Delay step configuration (duration/unit) validates

### 3. Trigger System Testing
**Test Scenarios:**
1. **Application Created Trigger:**
   - Create new application
   - Verify workflow triggers automatically
   - Check WorkflowExecution is created

2. **Application Status Changed Trigger:**
   - Change application from 'created' to 'submitted'
   - Verify status-specific workflows trigger
   - Test conditional triggering

3. **Time-Based Delays:**
   - Create workflow with delay step
   - Verify ScheduledWorkflowJob is created
   - Test scheduled execution

### 4. Email Sending Testing
**Path:** WorkflowStep execution
- [ ] send_email step renders template correctly
- [ ] Email content includes proper headers/footers
- [ ] Field substitution works ({{user.first_name}}, etc.)
- [ ] Emails are sent via AdminMailer.workflow_email
- [ ] Error handling for missing templates

### 5. Workflow Execution Testing
- [ ] WorkflowExecution starts and progresses through steps
- [ ] Step failures are handled gracefully
- [ ] Workflow completes successfully
- [ ] Failed workflows mark errors correctly
- [ ] Progress tracking works (percentage, current step)

### 6. Background Job Processing
**Path:** ActiveJob/Sidekiq Testing
- [ ] EmailWorkflowExecutorJob processes workflows
- [ ] ScheduledWorkflowProcessorJob runs scheduled tasks
- [ ] Job retries work for failures
- [ ] Job logging is comprehensive

## Test Scenarios for Different Workflow Types

### Scenario 1: Welcome Email Sequence
1. Create workflow triggered on "application_created"
2. Step 1: Send welcome email immediately
3. Step 2: 3-day delay
4. Step 3: Send document reminder if not uploaded
5. **Expected:** New applications trigger welcome sequence

### Scenario 2: Status Change Notifications
1. Create workflow for "application_status_changed"
2. Condition: from_status = "submitted", to_status = "processing"
3. Step: Send "Under Review" notification
4. **Expected:** Status changes trigger appropriate emails

### Scenario 3: Abandoned Application Follow-up
1. Create workflow for "inactivity" trigger (future)
2. Step 1: 24-hour delay after last activity
3. Step 2: Send completion reminder
4. Step 3: 72-hour delay
5. Step 4: Send help offer
6. **Expected:** Inactive applications get follow-up sequence

## Common Issues to Watch For

1. **Workflow Not Triggering:** Check trigger conditions match exactly
2. **Email Template Errors:** Verify template exists and renders properly
3. **Background Job Issues:** Check ActiveJob is processing jobs
4. **Database Constraints:** Foreign key relationships must be valid
5. **Infinite Loops:** Ensure workflow steps don't create circular triggers
6. **Memory Issues:** Large workflow executions should be chunked
7. **Email Rate Limits:** Respect sending limits and implement throttling

## Development Testing Commands

### Rails Console Test Commands

```ruby
# Test workflow creation
user = User.first
workflow = EmailWorkflow.create!(
  name: "Test Welcome Sequence",
  trigger_type: "application_created",
  trigger_conditions: {},
  created_by: user
)

# Add workflow steps
step1 = workflow.workflow_steps.create!(
  step_type: "send_email",
  position: 0,
  configuration: { email_template_id: EmailTemplate.first.id },
  name: "Welcome Email"
)

step2 = workflow.workflow_steps.create!(
  step_type: "delay",
  position: 1,
  configuration: { duration: 3, unit: "days" },
  name: "3 Day Wait"
)

# Test workflow execution
application = Application.first
execution = workflow.execute_for(application)
execution.start!

# Check execution progress
execution.reload
puts "Status: #{execution.status}"
puts "Progress: #{execution.progress_percentage}%"
puts "Current Step: #{execution.current_step&.name}"

# Process scheduled jobs manually
ScheduledWorkflowProcessorJob.perform_now
```

### Model Testing
```ruby
# Test all models are properly configured
EmailWorkflow.count
WorkflowStep.count
WorkflowExecution.count
ScheduledWorkflowJob.ready_to_process.count

# Test associations
workflow = EmailWorkflow.first
workflow.workflow_steps.count
workflow.workflow_executions.count
```

## Success Criteria for Email Automation

The email automation system is working correctly when:
1. ✅ All model tests pass
2. ✅ Workflows trigger on application events
3. ✅ Email steps send emails with correct content
4. ✅ Delay steps create scheduled jobs
5. ✅ Scheduled jobs execute at correct times
6. ✅ Workflow executions track progress accurately
7. ✅ Error handling prevents system crashes
8. ✅ Background jobs process reliably
9. ✅ Email templates render with workflow context
10. ✅ System scales with multiple concurrent workflows

## Phase 2 Planning: Drag-and-Drop Interface

Future browser testing will include:
- [ ] Visual workflow builder loads
- [ ] Drag-and-drop node creation
- [ ] Node connection and flow validation
- [ ] Real-time preview of workflow logic
- [ ] Workflow templates and duplication
- [ ] A/B testing setup and results
- [ ] Analytics dashboard accuracy